buildscript {
	ext {
        springBootVersion = '2.1.3.RELEASE'
    }
	repositories {
		maven {
			url 'https://repo.spring.io/libs-release'
		}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}
// fully executable
bootJar {
	// https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html
	launchScript()
}
// Junit 테스트는 빌드시 제외
test {
	exclude 'com/grepiu/test/**'
}
sourceSets {
	main {
		java {
			srcDir "src/main/java"
		}

		resources {
			srcDir "src/main/resources"
		}
	}
	test {
		java {
			srcDir "src/test/java"
		}
	}
}
ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile

// 환경 파일 Set
//if (project.hasProperty('profile')) {
//	sourceSets.main.resources.srcDirs += "src/main/resources-${project.getProperty('profile')}"
//} else {
//	sourceSets.main.resources.srcDirs += "src/main/resources-local"
//}

// local 개발 환경 시작
//if(ext.profile == 'local') {
//	// mongodb
//	println '로컬 환경을 테스트 check 합니다.'
//	println 'MongoDb 확인....'
//
//	task preBuild  {
//		def classesDir = new File('/data/db');
//		doFirst {
//			println 'DB 경로 : ' + classesDir.isDirectory();
//			if (classesDir.isDirectory()) {
//				println 'Mongo DB 디레토리 확인됨.'
//			} else {
//				println '경로가 없어 생성합니다.'
//				classesDir.mkdirs()
//			}
//			println 'MongoDb 확인 완료'
//		}
//	}
//	task executeJob {
//		println "Custom Job 등록"
//	}
//	compileJava.dependsOn(preBuild,executeJob)
//}

dependencies {
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-freemarker'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-batch'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'

	implementation group: 'org.springframework.boot', name: 'spring-boot-devtools'

	implementation group: 'org.springframework.data', name: 'spring-data-mongodb', version: '2.1.5.RELEASE'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-oauth2', version: '2.1.1.RELEASE'

	// NoSuchMethodError: org.springframework.data.redis.connection.RedisConnection.set 문제로 exclude
//	compile.exclude group: 'org.springframework.cloud', module: 'spring-security-oauth2'
	implementation group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.3.3.RELEASE'

	// redis
	implementation group: 'redis.clients', name: 'jedis', version: '2.9.0'

    // Mybatis
	implementation group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '1.3.2'

	// odbc
	implementation('mysql:mysql-connector-java:5.1.38')
	implementation('org.apache.commons:commons-collections4:4.1')

	// guava
	implementation group: 'com.google.guava', name: 'guava', version: '23.6-jre'

	// 스웨거
	implementation ('io.springfox:springfox-swagger2:2.9.2') {
		exclude group: 'io.swagger', module: 'swagger-annotations'
		exclude group: 'io.swagger', module: 'swagger-models'
	}
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.5.22'
	implementation group: 'io.swagger', name: 'swagger-models', version: '1.5.22'

	// Lombok 플로그인
	implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.6'

	// jsoup
	implementation group: 'org.jsoup', name: 'jsoup', version: '1.11.2'

	// websocket
	implementation group: 'org.webjars', name: 'webjars-locator', version: '0.32'
	implementation group: 'org.webjars', name: 'sockjs-client', version: '1.1.2'
	implementation("org.webjars:stomp-websocket:2.3.3-1")
	implementation("org.webjars:bootstrap:3.3.7")
	implementation("org.webjars:jquery:3.3.1")

	//  동적 사이트 크롤링을 위해 추가
	implementation group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version: '3.141.59'
	implementation group: 'org.seleniumhq.selenium', name: 'selenium-api', version: '3.141.59'
	implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

	// GSON
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

	// 인증 JWT
//	compile group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.0.9.RELEASE'

	// 파일 업로드
	implementation group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
	implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'
	
	// openJDK로 변경
	implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
	implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0.1'
	implementation group: 'org.glassfish.jaxb', name: 'jaxb-core', version: '2.3.0.1'
	implementation group: 'javax.activation', name: 'activation', version: '1.1.1'

	// aws
	implementation 'com.amazonaws:aws-java-sdk-bom:1.11.228'

	// Annotation Procesor 적용
	annotationProcessor 'org.projectlombok:lombok:1.18.6'
	testAnnotationProcessor("org.projectlombok:lombok:1.18.6")

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}


